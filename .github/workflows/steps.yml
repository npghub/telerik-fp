name: Telerik Final Project
env:
  DOCKER_HUB_REPO: 5ko5ko/telerikrepo
on:
  push:
    branches: ["master"]
jobs:
  pre-build:
    runs-on: ubuntu-latest
    steps:
    - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
    - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub!"
    - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
  style:
    needs: pre-build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.9']        
        exclude:
          - os: macos-latest
            python-version: '3.8'
    steps:
    - name: Check out repository code
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python --version
        python -m pip install --upgrade pip
        pip install pycodestyle art
    - name: Style with pycodestyle
      run: |
        python --version
        pycodestyle test.py
  lint:
    needs: pre-build
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository code
      uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install art pylint==2.11.1
    - name: Lint with pylint
      run: |
        python lint_test.py   
  build:
    needs: [style,lint]
    runs-on: ubuntu-latest
    steps:
    - name: Check out repo code
      uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install art
    - name: Build container
      run: echo "Building docker image"
    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: test.py
        path: test.py
  unit-test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Check out repo code
      uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Unit testing
      run: |
        pip install art
        python3 -m doctest test.py
  SAST:
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SCA:
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python-3.8@master
#        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
  upload:
    name: Upload custom NGINX image to docker hub repo
    needs: SAST
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: docker build -t $DOCKER_HUB_REPO:nginx-${GITHUB_SHA:0:8} -t $DOCKER_HUB_REPO:latest -f nginx.Dockerfile .
      - name: Push to docker repo
        run: |
          docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password ${{ secrets.DOCKER_HUB_PASSWORD }}
          docker image push --all-tags $DOCKER_HUB_REPO
  deploy:
    needs: SAST
    runs-on: ubuntu-latest
    steps:
    - name: Deploy
      run: echo "Deploying to cluster"
#   DAST:
#     needs: deploy
#     runs-on: ubuntu-latest
#     steps:
#     - name: ZAP Scan
#       uses: zaproxy/action-baseline@v0.6.1
#       with:
#        target: 'https://www.zaproxy.org'
    

