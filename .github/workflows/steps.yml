name: Telerik Final Project
env:
  DOCKER_HUB_REPO: 5ko5ko/telerikrepo
on:
  push:
    branches: ["master"]
jobs:
  pre-build:
    runs-on: ubuntu-latest
    steps:
    - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
    - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub!"
    - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
  style:
    needs: pre-build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.9']        
        exclude:
          - os: macos-latest
            python-version: '3.8'
    steps:
    - name: Check out repository code
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python --version
        python -m pip install --upgrade pip
        pip install pycodestyle art
    - name: Style with pycodestyle
      run: |
        python --version
        pycodestyle test.py
  lint:
    needs: pre-build
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository code
      uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install art pylint==2.11.1
    - name: Lint with pylint
      run: |
        python lint_test.py   
  # build:
  # # this job is not actually needed. Just left it as upload-artifact repo demonstration
  #     needs: [style,lint]
  #     runs-on: ubuntu-latest
  #     steps:
  #     - name: Check out repo code
  #       uses: actions/checkout@v2
  #     - name: Set up Python 3.9
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.9
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install art
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v1.0.0
  #       with:
  #         name: test.py
  #         path: test.py
  unit-test:
    needs: [style,lint]
    runs-on: ubuntu-latest
    steps:
    - name: Check out repo code
      uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Unit testing
      run: |
        python -m pip install --upgrade pip
        pip install art
        python3 -m doctest test.py
  SAST:
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SCA:
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo code
        uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: false
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
  #     - name: Print dir workdir contents
  #       run: |
  #         ls -lsa /home/runner/work/telerik-fp/telerik-fp
  upload:
    name: Upload custom NGINX image to docker hub repo
    needs: SAST
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - name: Build
        env: 
          DOCKER_IMAGE_TAG: ${GITHUB_SHA:0:8}
        run: docker build -t $DOCKER_HUB_REPO:${{ env.DOCKER_IMAGE_TAG }} -t $DOCKER_HUB_REPO:latest -f nginx.Dockerfile .
      - name: Push to docker repo
        run: |
          docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password ${{ secrets.DOCKER_HUB_PASSWORD }}
          docker image push --all-tags $DOCKER_HUB_REPO
  # push_manifest:
  #   name: Update and push the new K manifest
  #   needs: upload
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout config repo
  #       uses: actions/checkout@v2
  #       with:
  #         repository: npghub/telerik-fp-config
  #         persist-credentials: false
  #         token: ${{ secrets.GIT_AUTOPUSH}}
  #         # fetch-depth: 0
  #     - name: Update config repo
  #       env:
  #         GITHUB_USERNAME: npghub
  #         GITHUB_EMAIL: petko@nitropack.io
  #       run: |
  #         sed -i "s/$(grep 5ko5ko\/telerikrepo k8s/deploy_k8.yml | awk -F':' '{print $3}')/${{ env.DOCKER_IMAGE_TAG }}/g" k8s/deploy_k8.yml
  #         cat k8s/deploy_k8.yml
  #         git config --local user.email "$GITHUB_EMAIL"
  #         git config --local user.name "$GITHUB_USERNAME"
  #         git remote set-url origin https://$GITHUB_USERNAME:${{ secrets.GIT_AUTOPUSH}}@github.com/$GITHUB_USERNAME/telerik-fp-config.git
  #         git commit -am "Update K manifest"
  #         git push
  DAST:
    name: StackHawk DAST scan
    needs: upload
    runs-on: ubuntu-latest
    steps:
    - name: Run the newly built app container
      run: |
        docker run -p 8080:80 -d 5ko5ko/telerikrepo:latest
    - name: Check out repo code
      uses: actions/checkout@v2
    - name: Run hawk scan
      uses: stackhawk/hawkscan-action@v1.3.2
      with:
        apiKey: ${{ secrets.HAWK_API_KEY }}
#   deploy:
#     needs: DAST
#     runs-on: ubuntu-latest
#     steps:
#     - name: Deploy
#       run: echo "Deploying to cluster is done by ArgoCD"
  # DAST:
  #   needs: deploy
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: ZAP Scan
  #     uses: zaproxy/action-baseline@v0.6.1
  #     with:
  #      target: 'https://www.zaproxy.org'
